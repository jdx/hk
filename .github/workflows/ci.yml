name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    tags: ["*"]
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MISE_EXPERIMENTAL: true
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
      - name: Install mise
        uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - name: Build hk
        run: |
          mise run init
          mise run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hk-build-${{ matrix.os }}
          path: target/debug/hk

  ci:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          #- ubuntu-24.04-arm
          #- windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - run: brew install parallel
        if: ${{ matrix.os == 'macos-latest' }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
      - uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: hk-build-${{ matrix.os }}
      - name: Setup hk binary
        run: |
          mkdir -p target/debug
          mv hk target/debug/hk
          chmod +x target/debug/hk
      - run: mise x -- bun i
      - name: mise run ci
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: "mise run test:cargo ::: lint ::: docs-sync"

  msrv:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
      - uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - run: mise run msrv

  bats:
    name: Bats tests (shard ${{ matrix.shard }} of ${{ matrix.total_shards }}, ${{ matrix.os }}, HK_LIBGIT2=${{ matrix.hk_libgit2 }})
    needs: build
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        hk_libgit2: [0, 1]
        shard: [0, 1, 2, 3]
        total_shards: [4]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          submodules: recursive

      - name: Install parallel (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install parallel

      - name: Install mise
        uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2

      - name: Install tools (mise install)
        shell: bash
        run: |
          set -euxo pipefail
          mise install
          which pkl && pkl --version || true
          which prettier && prettier --version || true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: hk-build-${{ matrix.os }}

      - name: Setup hk binary
        run: |
          mkdir -p target/debug
          mv hk target/debug/hk
          chmod +x target/debug/hk
          echo "$GITHUB_WORKSPACE/target/debug" >> "$GITHUB_PATH"

      - name: Verify setup
        run: |
          echo "PATH=$PATH"
          echo "Checking hk binary:"
          ls -la target/debug/hk
          echo "Testing hk:"
          target/debug/hk --version
          echo "Configuring git (non-interactive)"
          git config --global user.email "ci@example.invalid"
          git config --global user.name "CI Bot"
          git config --global init.defaultBranch main
          git config --global advice.detachedHead false
          git config --global core.autocrlf input
          echo "Checking bats:"
          ls -la test/bats/bin/bats
          echo "Test files:"
          find test -maxdepth 1 -name '*.bats' | wc -l

      - name: Run bats for this shard
        env:
          HK_LOG_LEVEL: warn
          HK_LIBGIT2: ${{ matrix.hk_libgit2 }}
        shell: bash
        run: |
          # Ensure hk is on PATH for this step (some environments delay GITHUB_PATH propagation)
          export PATH="$GITHUB_WORKSPACE/target/debug:$PATH"
          echo "PATH=$PATH"
          command -v hk && hk --version || echo "hk not found"
          # Select test files for this shard using simple math
          shard=${{ matrix.shard }}
          total=${{ matrix.total_shards }}

          echo "Starting shard $shard of $total"
          mapfile -t shard_files < <(find test -maxdepth 1 -name '*.bats' -type f | sort | awk -v shard="$shard" -v total="$total" '(NR-1)%total==shard')
          echo "Shard has ${#shard_files[@]} files"
          printf '%s\n' "${shard_files[@]}" | head -5
          [ ${#shard_files[@]} -gt 5 ] && echo "..."

          # Use GNU parallel if available, else xargs -P; ensure timeout exists (gtimeout on macOS)
          TIMEOUT_BIN=timeout
          if command -v gtimeout >/dev/null 2>&1; then TIMEOUT_BIN=gtimeout; fi
          ./test/bats/bin/bats --version
          ./test/bats/bin/bats --verbose-run --formatter tap test/arg_escape.bats

          run_one() {
            file="$1"
            echo "Running: $file"
            "$TIMEOUT_BIN" 5m ./test/bats/bin/bats "$file" || echo "FAILED or TIMEOUT: $file"
          }
          export -f run_one
          export TIMEOUT_BIN

          if command -v parallel >/dev/null 2>&1; then
            printf '%s\n' "${shard_files[@]}" | parallel -j 4 --halt now,fail=1 run_one {}
          else
            printf '%s\n' "${shard_files[@]}" | xargs -I{} -P 4 bash -lc 'run_one "$@"' _ {}
          fi

          echo "Shard $shard completed"

  finish:
    needs:
      - bats
      - build
      - ci
      - msrv
    runs-on: ubuntu-latest
    steps:
      - run: echo "All jobs completed successfully"
