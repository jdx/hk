name: CI

on:
  push:
    branches: ["**"]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cargo:
    name: Cargo tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2

      - name: Test
        run: cargo test --all --all-features -- --nocapture

  bats:
    name: Bats tests (shard ${{ matrix.shard }} of ${{ matrix.total_shards }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [0, 1, 2, 3]
        total_shards: [4]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure bash dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: List and shard test files
        id: shard
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t files < <(ls test/*.bats | sort)
          shard_index=${{ matrix.shard }}
          shard_count=${{ matrix.total_shards }}
          selected=()
          for i in "${!files[@]}"; do
            if (( i % shard_count == shard_index )); then
              selected+=("${files[$i]}")
            fi
          done
          if (( ${#selected[@]} == 0 )); then
            echo "No tests in this shard"
            echo "files=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          printf '%s\n' "${selected[@]}" | jq -R . | jq -cs . > shard.json
          echo "files=$(cat shard.json)" >> "$GITHUB_OUTPUT"

      - name: Run bats for this shard
        if: steps.shard.outputs.files != '[]'
        env:
          HK_LOG_LEVEL: warn
        run: |
          set -euo pipefail
          files=$(echo '${{ steps.shard.outputs.files }}' | jq -r '.[]')
          # Use the vendored bats to ensure consistent version
          BATS=./test/bats/bin/bats
          chmod +x "$BATS"
          # Run each file explicitly to avoid picking up vendored bats tests
          # Also run with jobs for intra-shard parallelism
          $BATS --jobs 8 $files

name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    tags: ["*"]
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MISE_EXPERIMENTAL: true
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          #- ubuntu-24.04-arm
          #- windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - run: brew install parallel
        if: ${{ matrix.os == 'macos-latest' }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
      - uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - run: mise x -- bun i
      - name: mise run ci
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: mise run ci
  msrv:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
      - uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - run: mise run msrv
  docs-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Check documentation sync
        run: ./scripts/check-docs-sync.sh
