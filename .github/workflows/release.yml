name: release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*
  workflow_dispatch:
    inputs:
      version:
        description: "Version (without leading v)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            build-tool: cargo
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            build-tool: cross
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            build-tool: cross
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            build-tool: cargo
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            build-tool: cargo
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
        with:
          shared-key: rust-${{ matrix.target }}
      - if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@95e84a1a18f2bdbc5c6ab9b7f4429372e4b13a8b # v5
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASS }}
      - uses: taiki-e/upload-rust-binary-action@3962470d6e7f1993108411bc3f75a135ec67fc8c # v1
        with:
          bin: hk
          target: ${{ matrix.target }}
          build-tool: ${{ matrix.build-tool }}
          token: ${{ secrets.GITHUB_TOKEN }}
          features: git2/vendored-libgit2,git2/vendored-openssl
          profile: serious
          codesign: "Developer ID Application: Jeffrey Dickey (4993Y37DX6)"
          codesign_prefix: dev.jdx.
          dry-run: true # Always dry-run to just build without uploading
      - name: Upload binary artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: binary-${{ matrix.target }}
          path: |
            hk-*.tar.gz
            hk-*.tar.xz
            hk-*.zip
          retention-days: 1

  build-pkl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - name: Package Pkl
        run: |
          TAG_NAME="${{ github.ref_name }}"
          if [ -z "$TAG_NAME" ]; then
            TAG_NAME="v${{ inputs.version }}"
          fi
          VERSION="${TAG_NAME#v}"
          echo "Building pkl package for version: $VERSION"

          # Use the mise task which outputs to docs/public/pkl
          VERSION="${VERSION}" mise run dist

          echo "Contents of docs/public/pkl:"
          ls -la docs/public/pkl || true
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pkl-packages
          path: docs/public/pkl/*
          if-no-files-found: error
          retention-days: 1

  create-release:
    needs: [build-binaries, build-pkl]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2
      - name: Generate release notes
        run: git cliff --latest > release-notes.md && cat release-notes.md
      - name: Download all artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          path: artifacts
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Move all binary artifacts to release-assets
          find artifacts/binary-* -type f \( -name "*.tar.gz" -o -name "*.tar.xz" -o -name "*.zip" \) -exec mv {} release-assets/ \;
          # Move pkl packages to release-assets
          if [ -d "artifacts/pkl-packages" ]; then
            find artifacts/pkl-packages -type f -exec mv {} release-assets/ \;
          fi
          ls -la release-assets/
      - name: Create release with all assets
        run: |
          TAG_NAME="${{ github.ref_name }}"
          if [ -z "$TAG_NAME" ]; then
            TAG_NAME="v${{ inputs.version }}"
          fi
          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --notes-file release-notes.md \
            release-assets/*
