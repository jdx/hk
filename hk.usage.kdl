name hk
bin hk
version "1.10.3"
about "A tool for managing git hooks"
usage "Usage: hk [OPTIONS] <COMMAND>"
flag --hkrc help="Path to user configuration file" global=#true {
    arg <PATH>
}
flag "-j --jobs" help="Number of jobs to run in parallel" global=#true {
    arg <JOBS>
}
flag "-p --profile" help="Profiles to enable/disable prefix with ! to disable e.g. --profile slow --profile !fast" var=#true global=#true {
    arg <PROFILE>
}
flag "-s --slow" help="Shorthand for --profile=slow" global=#true
flag "-v --verbose" help="Enables verbose output" var=#true global=#true count=#true
flag "-n --no-progress" help="Disables progress output" global=#true
flag "-q --quiet" help="Suppresses output" global=#true
flag --silent help="Suppresses all output" global=#true
cmd builtins help="Lists all available builtin linters"
cmd cache hide=#true subcommand_required=#true help="Manage hk internal cache" {
    cmd clear help="Clear the cache directory"
}
cmd check help="Fixes code" {
    alias c
    flag "-a --all" help="Run on all files instead of just staged files"
    flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
    flag "-c --check" help="Run run command instead of fix command"
    flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
        arg <EXCLUDE>
    }
    flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
        arg <EXCLUDE_GLOB>
    }
    flag --from-ref help="Start reference for checking files (requires --to-ref)" {
        arg <FROM_REF>
    }
    flag --to-ref help="End reference for checking files (requires --from-ref)" {
        arg <TO_REF>
    }
    flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
        arg <GLOB>
    }
    flag "-P --plan" help="Print the plan instead of running the hook"
    flag "-S --step" help="Run only specific step(s)" var=#true {
        arg <STEP>
    }
    flag --skip-step help="Skip specific step(s)" var=#true {
        arg <STEP>
    }
    arg "[FILES]…" help="Run on specific files" required=#false var=#true
}
cmd completion help="Generates shell completion scripts" {
    arg <SHELL> help="The shell to generate completion for"
}
cmd config help="Generate a default hk.toml configuration file" {
    alias cfg
}
cmd fix help="Fixes code" {
    alias f
    flag "-a --all" help="Run on all files instead of just staged files"
    flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
    flag "-c --check" help="Run run command instead of fix command"
    flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
        arg <EXCLUDE>
    }
    flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
        arg <EXCLUDE_GLOB>
    }
    flag --from-ref help="Start reference for checking files (requires --to-ref)" {
        arg <FROM_REF>
    }
    flag --to-ref help="End reference for checking files (requires --from-ref)" {
        arg <TO_REF>
    }
    flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
        arg <GLOB>
    }
    flag "-P --plan" help="Print the plan instead of running the hook"
    flag "-S --step" help="Run only specific step(s)" var=#true {
        arg <STEP>
    }
    flag --skip-step help="Skip specific step(s)" var=#true {
        arg <STEP>
    }
    arg "[FILES]…" help="Run on specific files" required=#false var=#true
}
cmd init help="Generates a new hk.pkl file for a project" {
    alias generate hide=#true
    flag "-f --force" help="Overwrite existing hk.pkl file"
    flag --mise help="Generate a mise.toml file with hk configured" {
        long_help "Generate a mise.toml file with hk configured\n\nSet HK_MISE=1 to make this default behavior."
    }
}
cmd install help="Sets up git hooks to run hk" {
    alias i
    flag --mise help="Use `mise x` to execute hooks. With this, it won't\nbe necessary to activate mise in order to run hooks\nwith mise tools." {
        long_help "Use `mise x` to execute hooks. With this, it won't\nbe necessary to activate mise in order to run hooks\nwith mise tools.\n\nSet HK_MISE=1 to make this default behavior."
    }
}
cmd run help="Run a hook" {
    alias r
    flag "-a --all" help="Run on all files instead of just staged files"
    flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
    flag "-c --check" help="Run run command instead of fix command"
    flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
        arg <EXCLUDE>
    }
    flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
        arg <EXCLUDE_GLOB>
    }
    flag --from-ref help="Start reference for checking files (requires --to-ref)" {
        arg <FROM_REF>
    }
    flag --to-ref help="End reference for checking files (requires --from-ref)" {
        arg <TO_REF>
    }
    flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
        arg <GLOB>
    }
    flag "-P --plan" help="Print the plan instead of running the hook"
    flag "-S --step" help="Run only specific step(s)" var=#true {
        arg <STEP>
    }
    flag --skip-step help="Skip specific step(s)" var=#true {
        arg <STEP>
    }
    arg "[OTHER]" required=#false hide=#true
    arg "[FILES]…" help="Run on specific files" required=#false var=#true
    cmd commit-msg {
        alias cm
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
            arg <EXCLUDE_GLOB>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        arg <COMMIT_MSG_FILE> help="The path to the file that contains the commit message"
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
    cmd pre-commit help="Sets up git hooks to run hk" {
        alias pc
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
            arg <EXCLUDE_GLOB>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
    cmd pre-push {
        alias pp
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
            arg <EXCLUDE_GLOB>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        arg "[REMOTE]" help="Remote name" required=#false
        arg "[URL]" help="Remote URL" required=#false
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
    cmd prepare-commit-msg {
        alias pcm
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --exclude-glob help="Exclude files that match these glob patterns that otherwise would have been selected" var=#true {
            arg <EXCLUDE_GLOB>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        arg <COMMIT_MSG_FILE> help="The path to the file that contains the commit message so far"
        arg "[SOURCE]" help="The source of the commit message (e.g., \"message\", \"template\", \"merge\")" required=#false
        arg "[SHA]" help="The SHA of the commit being amended (if applicable)" required=#false
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
}
cmd test help="Run step-defined tests" {
    flag --step help="Filter by step name (repeatable)" var=#true {
        arg <STEP>
    }
    flag --name help="Filter by test name (repeatable)" var=#true {
        arg <NAME>
    }
    flag --list help="List tests without running"
}
cmd uninstall help="Removes hk hooks from the current git repository"
cmd usage hide=#true help="Generates a usage spec for the CLI" {
    long_help "Generates a usage spec for the CLI\n\nhttps://usage.jdx.dev"
}
cmd validate help="Validate the config file"
cmd version help="Print the version of hk"
