name hk
bin hk
version "1.18.0"
about "A tool for managing git hooks"
usage "Usage: hk [OPTIONS] <COMMAND>"
flag --hkrc help="Path to user configuration file" global=#true {
    arg <PATH>
}
flag "-j --jobs" help="Number of jobs to run in parallel" global=#true {
    arg <JOBS>
}
flag "-p --profile" help="Profiles to enable/disable prefix with ! to disable e.g. --profile slow --profile !fast" var=#true global=#true {
    arg <PROFILE>
}
flag "-s --slow" help="Shorthand for --profile=slow" global=#true
flag "-v --verbose" help="Enables verbose output" var=#true global=#true count=#true
flag "-n --no-progress" help="Disables progress output" global=#true
flag "-q --quiet" help="Suppresses output" global=#true
flag --silent help="Suppresses all output" global=#true
flag --trace help="Enable tracing spans and performance diagnostics" global=#true
flag --json help="Output in JSON format" global=#true
cmd builtins help="Lists all available builtin linters"
cmd cache hide=#true subcommand_required=#true help="Manage hk internal cache" {
    cmd clear help="Clear the cache directory"
}
cmd check help="Fixes code" {
    alias c
    flag "-a --all" help="Run on all files instead of just staged files"
    flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
    flag "-c --check" help="Run run command instead of fix command"
    flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
        arg <EXCLUDE>
    }
    flag --from-ref help="Start reference for checking files (requires --to-ref)" {
        arg <FROM_REF>
    }
    flag --to-ref help="End reference for checking files (requires --from-ref)" {
        arg <TO_REF>
    }
    flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
        arg <GLOB>
    }
    flag "-P --plan" help="Print the plan instead of running the hook"
    flag "-S --step" help="Run only specific step(s)" var=#true {
        arg <STEP>
    }
    flag --skip-step help="Skip specific step(s)" var=#true {
        arg <STEP>
    }
    flag --fail-fast help="Abort on first failure"
    flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
    flag --stash help="Stash method to use for git hooks" {
        arg <STASH> {
            choices git patch-file none
        }
    }
    arg "[FILES]…" help="Run on specific files" required=#false var=#true
}
cmd completion help="Generates shell completion scripts" {
    arg <SHELL> help="The shell to generate completion for"
}
cmd config help="Configuration introspection and management" {
    alias cfg
    long_help "Configuration introspection and management\n\nView and inspect hk's configuration from all sources. Configuration is merged from multiple sources in precedence order: CLI flags > Environment variables > Git config (local) > User config (.hkrc.pkl) > Git config (global) > Project config (hk.pkl) > Built-in defaults."
    cmd dump help="Print effective runtime settings (JSON format)" {
        long_help "Print effective runtime settings (JSON format)\n\nShows the merged configuration from all sources including CLI flags, environment variables, git config, user config, and project config."
        flag --format help="Output format (json or toml)" {
            arg <FORMAT> {
                choices json toml
            }
        }
    }
    cmd explain help="Explain where a configuration value comes from" {
        long_help "Explain where a configuration value comes from\n\nShows the resolved value, its source (env/git/cli/default), and the full precedence chain showing all layers that could affect it."
        arg <KEY> help="Configuration key to explain"
    }
    cmd get help="Get a specific configuration value" {
        long_help "Get a specific configuration value\n\nAvailable keys: jobs, enabled_profiles, disabled_profiles, fail_fast, display_skip_reasons, warnings, exclude, skip_steps, skip_hooks"
        arg <KEY> help="Configuration key to retrieve" help_long="Configuration key to retrieve\n\nAvailable keys: jobs, enabled_profiles, disabled_profiles, fail_fast, display_skip_reasons, warnings, exclude, skip_steps, skip_hooks"
    }
    cmd sources help="Show the configuration source precedence order" {
        long_help "Show the configuration source precedence order\n\nLists all configuration sources in order of precedence to help understand where configuration values come from."
    }
}
cmd fix help="Fixes code" {
    alias f
    flag "-a --all" help="Run on all files instead of just staged files"
    flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
    flag "-c --check" help="Run run command instead of fix command"
    flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
        arg <EXCLUDE>
    }
    flag --from-ref help="Start reference for checking files (requires --to-ref)" {
        arg <FROM_REF>
    }
    flag --to-ref help="End reference for checking files (requires --from-ref)" {
        arg <TO_REF>
    }
    flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
        arg <GLOB>
    }
    flag "-P --plan" help="Print the plan instead of running the hook"
    flag "-S --step" help="Run only specific step(s)" var=#true {
        arg <STEP>
    }
    flag --skip-step help="Skip specific step(s)" var=#true {
        arg <STEP>
    }
    flag --fail-fast help="Abort on first failure"
    flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
    flag --stash help="Stash method to use for git hooks" {
        arg <STASH> {
            choices git patch-file none
        }
    }
    arg "[FILES]…" help="Run on specific files" required=#false var=#true
}
cmd init help="Generates a new hk.pkl file for a project" {
    alias generate hide=#true
    flag "-f --force" help="Overwrite existing hk.pkl file"
    flag --mise help="Generate a mise.toml file with hk configured" {
        long_help "Generate a mise.toml file with hk configured\n\nSet HK_MISE=1 to make this default behavior."
    }
}
cmd install help="Sets up git hooks to run hk" {
    alias i
    flag --mise help="Use `mise x` to execute hooks. With this, it won't\nbe necessary to activate mise in order to run hooks\nwith mise tools." {
        long_help "Use `mise x` to execute hooks. With this, it won't\nbe necessary to activate mise in order to run hooks\nwith mise tools.\n\nSet HK_MISE=1 to make this default behavior."
    }
}
cmd migrate subcommand_required=#true help="Migrate from other hook managers to hk" {
    cmd pre-commit help="Migrate from pre-commit to hk" {
        flag "-c --config" help="Path to .pre-commit-config.yaml" {
            arg <CONFIG>
        }
        flag "-o --output" help="Output path for hk.pkl" {
            arg <OUTPUT>
        }
        flag "-f --force" help="Overwrite existing hk.pkl file"
        flag --hk-pkl-root help="Root path for hk pkl files (e.g., \"pkl\" for local, or package URL prefix) If specified, will use {root}/Config.pkl and {root}/Builtins.pkl" {
            arg <HK_PKL_ROOT>
        }
    }
}
cmd run help="Run a hook" {
    alias r
    flag "-a --all" help="Run on all files instead of just staged files"
    flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
    flag "-c --check" help="Run run command instead of fix command"
    flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
        arg <EXCLUDE>
    }
    flag --from-ref help="Start reference for checking files (requires --to-ref)" {
        arg <FROM_REF>
    }
    flag --to-ref help="End reference for checking files (requires --from-ref)" {
        arg <TO_REF>
    }
    flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
        arg <GLOB>
    }
    flag "-P --plan" help="Print the plan instead of running the hook"
    flag "-S --step" help="Run only specific step(s)" var=#true {
        arg <STEP>
    }
    flag --skip-step help="Skip specific step(s)" var=#true {
        arg <STEP>
    }
    flag --fail-fast help="Abort on first failure"
    flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
    flag --stash help="Stash method to use for git hooks" {
        arg <STASH> {
            choices git patch-file none
        }
    }
    arg "[OTHER]" required=#false hide=#true
    arg "[FILES]…" help="Run on specific files" required=#false var=#true
    cmd commit-msg {
        alias cm
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        flag --fail-fast help="Abort on first failure"
        flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
        flag --stash help="Stash method to use for git hooks" {
            arg <STASH> {
                choices git patch-file none
            }
        }
        arg <COMMIT_MSG_FILE> help="The path to the file that contains the commit message"
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
    cmd pre-commit help="Sets up git hooks to run hk" {
        alias pc
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        flag --fail-fast help="Abort on first failure"
        flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
        flag --stash help="Stash method to use for git hooks" {
            arg <STASH> {
                choices git patch-file none
            }
        }
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
    cmd pre-push {
        alias pp
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        flag --fail-fast help="Abort on first failure"
        flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
        flag --stash help="Stash method to use for git hooks" {
            arg <STASH> {
                choices git patch-file none
            }
        }
        arg "[REMOTE]" help="Remote name" required=#false
        arg "[URL]" help="Remote URL" required=#false
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
    cmd prepare-commit-msg {
        alias pcm
        flag "-a --all" help="Run on all files instead of just staged files"
        flag "-f --fix" help="Run fix command instead of run command This is the default behavior unless HK_FIX=0"
        flag "-c --check" help="Run run command instead of fix command"
        flag "-e --exclude" help="Exclude files that otherwise would have been selected" var=#true {
            arg <EXCLUDE>
        }
        flag --from-ref help="Start reference for checking files (requires --to-ref)" {
            arg <FROM_REF>
        }
        flag --to-ref help="End reference for checking files (requires --from-ref)" {
            arg <TO_REF>
        }
        flag "-g --glob" help="Run on files that match these glob patterns" var=#true {
            arg <GLOB>
        }
        flag "-P --plan" help="Print the plan instead of running the hook"
        flag "-S --step" help="Run only specific step(s)" var=#true {
            arg <STEP>
        }
        flag --skip-step help="Skip specific step(s)" var=#true {
            arg <STEP>
        }
        flag --fail-fast help="Abort on first failure"
        flag --no-fail-fast help="Continue on failures (opposite of --fail-fast)"
        flag --stash help="Stash method to use for git hooks" {
            arg <STASH> {
                choices git patch-file none
            }
        }
        arg <COMMIT_MSG_FILE> help="The path to the file that contains the commit message so far"
        arg "[SOURCE]" help="The source of the commit message (e.g., \"message\", \"template\", \"merge\")" required=#false
        arg "[SHA]" help="The SHA of the commit being amended (if applicable)" required=#false
        arg "[FILES]…" help="Run on specific files" required=#false var=#true
    }
}
cmd test help="Run step-defined tests" {
    flag --step help="Filter by step name (repeatable)" var=#true {
        arg <STEP>
    }
    flag --name help="Filter by test name (repeatable)" var=#true {
        arg <NAME>
    }
    flag --list help="List tests without running"
}
cmd uninstall help="Removes hk hooks from the current git repository"
cmd usage hide=#true help="Generates a usage spec for the CLI" {
    long_help "Generates a usage spec for the CLI\n\nhttps://usage.jdx.dev"
}
cmd util subcommand_required=#true help="Utility commands for file operations" {
    cmd check-added-large-files help="Check for large files being added to repository" {
        flag --maxkb help="Maximum file size in kilobytes (default: 500)" {
            arg <MAXKB>
        }
        arg <FILES>… help="Files to check" var=#true
    }
    cmd check-byte-order-marker help="Check for UTF-8 byte order marker (BOM)" {
        arg <FILES>… help="Files to check" var=#true
    }
    cmd check-case-conflict help="Check for case-insensitive filename conflicts" {
        arg <FILES>… help="Files to check for case conflicts" var=#true
    }
    cmd check-executables-have-shebangs help="Check that executable files have shebangs" {
        arg <FILES>… help="Files to check" var=#true
    }
    cmd check-merge-conflict help="Check for merge conflict markers" {
        flag --assume-in-merge help="Run the check even when not in a merge"
        arg <FILES>… help="Files to check" var=#true
    }
    cmd check-symlinks help="Check for broken symlinks" {
        arg <FILES>… help="Files to check" var=#true
    }
    cmd detect-private-key help="Detect private keys in files" {
        arg <FILES>… help="Files to check" var=#true
    }
    cmd end-of-file-fixer help="Check for and optionally fix missing final newlines" {
        flag "-f --fix" help="Fix files by adding final newline"
        arg <FILES>… help="Files to check/fix" var=#true
    }
    cmd fix-byte-order-marker help="Remove UTF-8 byte order marker (BOM)" {
        arg <FILES>… help="Files to remove BOM from" var=#true
    }
    cmd fix-smart-quotes help="Replace UTF-8 smart quotes" {
        arg <FILES>… help="Files to replace smart quotes in" var=#true
    }
    cmd mixed-line-ending help="Detect and fix mixed line endings" {
        flag "-f --fix" help="Fix mixed line endings by normalizing to LF"
        arg <FILES>… help="Files to check or fix" var=#true
    }
    cmd no-commit-to-branch help="Prevent commits to specific branches" {
        flag --branch help="Branch names to protect (default: main, master)" var=#true {
            arg <BRANCH>
        }
    }
    cmd python-check-ast help="Check Python files for valid syntax" {
        arg <FILES>… help="Files to check" var=#true
    }
    cmd python-debug-statements help="Detect Python debug statements" {
        arg <FILES>… help="Files to check" var=#true
    }
    cmd trailing-whitespace help="Check for and optionally fix trailing whitespace" {
        flag "-f --fix" help="Fix trailing whitespace by removing it"
        arg <FILES>… help="Files to check/fix" var=#true
    }
}
cmd validate help="Validate the config file"
cmd version help="Print the version of hk"
