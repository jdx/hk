# HK Settings Registry
# This is an internal options registry used for codegen (not user-edited config).
# It defines all configuration options and their sources, merge policies, and documentation.

[jobs]
default     = 0                                                              # 0 means auto-detect from environment or CPU count
docs        = "Maximum number of parallel jobs to run. 0 means auto-detect."
sources.cli = [ "--jobs", "-j" ]
sources.env = [ "HK_JOBS", "HK_JOB" ]
sources.git = [ "hk.jobs" ]
sources.pkl = "defaults.jobs"
type        = "int"

[fail_fast]
default     = true
docs        = "Abort execution on first failure."
sources.cli = [ "--fail-fast", "--no-fail-fast" ]
sources.env = [ "HK_FAIL_FAST" ]
sources.git = [ "hk.failFast" ]
sources.pkl = [ "fail_fast", "defaults.fail_fast" ]
type        = "bool"

[warnings]
default     = [  ]
docs        = "Warning tags to enable/show."
sources.env = [ "HK_WARNINGS" ]
sources.git = [ "hk.warnings" ]
sources.pkl = "warnings"
type        = "list<string>"

[hide_warnings]
default     = [  ]
docs        = "Warning tags to hide (union across sources)."
merge       = "union"
sources.env = [ "HK_HIDE_WARNINGS" ]
sources.git = [ "hk.hideWarnings" ]
sources.pkl = "hide_warnings"
type        = "list<string>"

[exclude]
default     = [  ]
docs        = "Glob patterns to exclude from processing (union across sources)."
merge       = "union"
sources.cli = [ "--exclude", "--exclude-glob", "-e" ]
sources.env = [ "HK_EXCLUDE" ]
sources.git = [ "hk.exclude", "hk.excludeGlob" ]
sources.pkl = "defaults.exclude"
type        = "list<string>"

[skip_steps]
default     = [  ]
docs        = "Skip specific steps across all hooks (union across sources)."
merge       = "union"
sources.cli = [ "--skip-step" ]
sources.env = [ "HK_SKIP_STEPS", "HK_SKIP_STEP" ]
sources.git = [ "hk.skipSteps", "hk.skipStep" ]
sources.pkl = "defaults.skip_steps"
type        = "list<string>"

[skip_hooks]
default     = [  ]
docs        = "Skip entire hooks (union across sources)."
merge       = "union"
sources.env = [ "HK_SKIP_HOOK", "HK_SKIP_HOOKS" ]
sources.git = [ "hk.skipHooks", "hk.skipHook" ]
sources.pkl = "defaults.skip_hooks"
type        = "list<string>"

[profiles]
default     = [  ]
docs        = "Profiles to enable/disable. Prefix with '!' to disable."
sources.cli = [ "--profile", "-p" ]
sources.env = [ "HK_PROFILE", "HK_PROFILES" ]
sources.git = [ "hk.profile" ]
sources.pkl = "defaults.profiles"
type        = "list<string>"

[slow]
default     = false
docs        = "Enable slow mode. Shorthand for --profile=slow."
sources.cli = [ "--slow", "-s" ]
type        = "bool"

[all]
default     = false
docs        = "Run on all files instead of just staged files."
sources.cli = [ "--all", "-a" ]
type        = "bool"

[fix]
default     = true
docs        = "Run fix command instead of check command."
sources.cli = [ "--fix", "-f" ]
sources.env = [ "HK_FIX" ]
sources.git = [ "hk.fix" ]
type        = "bool"

[check]
default     = false
docs        = "Run check command instead of fix command."
sources.cli = [ "--check", "-c" ]
sources.env = [ "HK_CHECK" ]
sources.git = [ "hk.check" ]
type        = "bool"

[check_first]
default     = true
docs        = "Run check before fix."
sources.env = [ "HK_CHECK_FIRST" ]
sources.git = [ "hk.checkFirst" ]
type        = "bool"

[stash]
default       = "auto"
docs          = "Stash method to use for git hooks."
sources.cli   = [ "--stash" ]
sources.env   = [ "HK_STASH" ]
sources.git   = [ "hk.stash" ]
type          = "enum"
validate.enum = [ "auto", "git", "patch-file", "none" ]

[stash_untracked]
default     = true
docs        = "Include untracked files when stashing."
sources.env = [ "HK_STASH_UNTRACKED" ]
sources.git = [ "hk.stashUntracked" ]
type        = "bool"

[display_skip_reasons]
default     = [ "profile-not-enabled" ]
docs        = "Which skip reasons to display. Options: all, none, disabled-by-config, profile-not-enabled."
sources.env = [ "HK_DISPLAY_SKIP_REASONS" ]
sources.git = [ "hk.displaySkipReasons" ]
sources.pkl = "display_skip_reasons"
type        = "list<string>"

[hkrc]
default     = ".hkrc.pkl"
docs        = "Path to user configuration file."
sources.cli = [ "--hkrc" ]
type        = "path"

[verbose]
default     = 0
docs        = "Verbose output level."
sources.cli = [ "--verbose", "-v" ]
type        = "int"

[quiet]
default     = false
docs        = "Suppress output."
sources.cli = [ "--quiet", "-q" ]
type        = "bool"

[silent]
default     = false
docs        = "Suppress all output."
sources.cli = [ "--silent" ]
type        = "bool"

[no_progress]
default     = false
docs        = "Disable progress output."
sources.cli = [ "--no-progress" ]
type        = "bool"

[trace]
default       = "off"
docs          = "Enable tracing spans and performance diagnostics."
sources.cli   = [ "--trace" ]
sources.env   = [ "HK_TRACE" ]
sources.git   = [ "hk.trace" ]
type          = "enum"
validate.enum = [ "off", "text", "json", "1", "true" ]

[json]
default     = false
docs        = "Output in JSON format."
sources.cli = [ "--json" ]
sources.env = [ "HK_JSON" ]
sources.git = [ "hk.json" ]
type        = "bool"

[plan]
default     = false
docs        = "Print the plan instead of executing."
sources.cli = [ "--plan", "-P" ]
type        = "bool"

[hide_when_done]
default     = false
docs        = "Hide output after successful completion."
sources.env = [ "HK_HIDE_WHEN_DONE" ]
type        = "bool"

[mise]
default     = false
docs        = "Enable mise integration."
sources.env = [ "HK_MISE" ]
type        = "bool"

[libgit2]
default     = true
docs        = "Use libgit2 instead of git CLI commands."
sources.env = [ "HK_LIBGIT2" ]
type        = "bool"

[summary_text]
default     = false
docs        = "Allow output summaries to be printed in text mode."
sources.env = [ "HK_SUMMARY_TEXT" ]
type        = "bool"

[timing_json]
docs        = "Path to write JSON timing report after hook finishes."
sources.env = [ "HK_TIMING_JSON" ]
type        = "path"

[log_level]
default       = "info"
docs          = "Log level for console output."
sources.env   = [ "HK_LOG", "HK_LOG_LEVEL" ]
type          = "enum"
validate.enum = [ "off", "error", "warn", "info", "debug", "trace" ]

[log_file_level]
default       = "info"
docs          = "Log level for file output."
sources.env   = [ "HK_LOG_FILE_LEVEL" ]
type          = "enum"
validate.enum = [ "off", "error", "warn", "info", "debug", "trace" ]

[log_file]
docs        = "Path to log file."
sources.env = [ "HK_LOG_FILE" ]
type        = "path"

[cache_dir]
docs        = "Directory for cache files."
sources.env = [ "HK_CACHE_DIR" ]
type        = "path"

[state_dir]
docs        = "Directory for state files."
sources.env = [ "HK_STATE_DIR" ]
type        = "path"

[from_ref]
docs        = "Start reference for checking files."
sources.cli = [ "--from-ref" ]
type        = "string"

[to_ref]
docs        = "End reference for checking files."
sources.cli = [ "--to-ref" ]
type        = "string"

[glob]
default     = [  ]
docs        = "Run on files that match these glob patterns."
sources.cli = [ "--glob", "-g" ]
type        = "list<string>"
